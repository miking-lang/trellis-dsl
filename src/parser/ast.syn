language Trellis

include "trellis-lexer.mc"

token LIdent {
  repr = LIdentRepr {},
  constructor = LIdentTok,
  fragment = LIdentTokenParser,
  ty = String,
}
token UIdent {
  repr = UIdentRepr {},
  constructor = UIdentTok,
  fragment = UIdentTokenParser,
  ty = String,
}
token Integer {
  repr = IntRepr {},
  constructor = IntTok,
  fragment = UIntTokenParser,
  ty = Int,
}
token Probability {
  repr = FloatRepr {},
  constructor = FloatTok,
  fragment = UFloatTokenParser,
  ty = Float,
}

token LName {
  base = LIdent,
  wrap = nameNoSym,
  ty = Name,
}
token UName {
  base = UIdent,
  wrap = nameNoSym,
  ty = Name,
}

-- Token types only used through literals
token {fragment = OperatorTokenParser,}
token {fragment = CommaTokenParser,}
token {fragment = BracketTokenParser,}
token {fragment = TrellisDotsTokenParser,}

-- Whitespace and comments
token {fragment = TrellisLineCommentParser,}
token {fragment = WhitespaceParser,}

start TrellisProgram

type TrellisProgram
type Decl
type InModelDecl
type ProbDecl

prod Main : TrellisProgram = d:Decl* "model" "{" indecl:InModelDecl* "}"

prod TypeDecl : Decl =
  "type" id:UName "=" "{" (constr:UName ("," constr:UName)*)? "}"

prod LetDecl : Decl = "let" id:LName (":" ty:TrellisType)? "=" e:TrellisExpr

prod AliasDecl : Decl = "alias" id:UName "=" ty:TrellisType

prod StateProperty : InModelDecl = "state" "=" ty:TrellisType

prod OutputProperty : InModelDecl = "output" "=" ty:TrellisType

prod Table : InModelDecl =
  "table" id:LName "(" (dim:TrellisType ("," dim:TrellisType)*)? ")"

prod ProbInModelDecl : InModelDecl =
  "P" "("
    ( init:"initial" fst:LName
    | out:"output" fst:LName "|" snd:LName
    | trans:"transition" fst:LName snd:LName ) ")"
    ( "=" pd:ProbDecl )

prod One : ProbDecl = e:TrellisExpr

prod Cases : ProbDecl = "{" (cases:{("|" s:TrellisSet "=>" e:TrellisExpr)})+ "}"

----------
-- Sets --
----------

type TrellisSet

prod Builder : TrellisSet =
  "{" p:TrellisPat "->" to:TrellisPat "|" (e:TrellisExpr ("," e:TrellisExpr)*) "}"

prod Literal : TrellisSet =
  "@" "{" (v:{e:TrellisExpr "->" to:TrellisExpr} ("," v:{e:TrellisExpr "->" to:TrellisExpr})*)? "}"

--------------
-- Patterns --
--------------

type TrellisPat

prod Con : TrellisPat = id:UName
prod VarP : TrellisPat = id:LName
prod IntP : TrellisPat = i:Integer
prod TrueP : TrellisPat = "true"
prod FalseP : TrellisPat = "false"
prod ArrayP : TrellisPat = "[" (p:TrellisPat ("," p:TrellisPat)*)? "]"
prod TupleP : TrellisPat = "(" p:TrellisPat ("," p:TrellisPat)+ ")"
postfix Dots : TrellisPat = "..."

-----------
-- Types --
-----------

type TrellisType

postfix ArrayT : TrellisType = "[" (count:Integer | namedCount:LName) "]"
prod Concrete : TrellisType = id:UName
prod TupleT : TrellisType = "(" t:TrellisType ("," t:TrellisType)+ ")"
prod IntRange : TrellisType = lb:Integer ".." (ub:Integer | namedUb:LName)
prod Bool : TrellisType = "Bool"
prod IntT : TrellisType = "Int"
prod ProbT : TrellisType = "Probability"

-----------------
-- Expressions --
-----------------

type TrellisExpr {
  grouping = "(" ")",
}

prod True : TrellisExpr = "true"
prod False : TrellisExpr = "false"
prod Var : TrellisExpr = id:LName
prod Constr : TrellisExpr = id:UName
prod Int : TrellisExpr = i:Integer
prod Prob : TrellisExpr = p:Probability
postfix Proj : TrellisExpr = "[" idx:Integer "]"
postfix TableAccess : TrellisExpr = "(" (e:TrellisExpr ("," e:TrellisExpr)*)? ")"
infix left Add : TrellisExpr = "+"
infix left Sub : TrellisExpr = "-"
infix left Mul : TrellisExpr = "*"
infix left Div : TrellisExpr = "/"
infix Eq : TrellisExpr = "=="
infix Neq : TrellisExpr = "!="
infix Lt : TrellisExpr = "<"
infix Gt : TrellisExpr = ">"
infix Leq : TrellisExpr = "<="
infix Geq : TrellisExpr = ">="
infix left And : TrellisExpr = "&&"
infix left Or : TrellisExpr = "||"

precedence {
  Proj TableAccess;
  Mul Div;
  Add Sub;
  ~ Eq Neq Lt Gt Leq Geq;
  And Or;
} except {
  Mul ? Div;
  And ? Or;
}

precedence {
  ~ Proj TableAccess;
  ~ And Or;
} except {
  Proj TableAccess ? And Or;
}
